{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Consolas;}{\f1\fnil Cascadia Mono;}{\f2\fnil\fcharset0 Cascadia Mono;}}
{\colortbl ;\red255\green0\blue0;\red0\green77\blue187;\red0\green0\blue0;\red0\green0\blue255;\red43\green145\blue175;\red128\green128\blue128;\red163\green21\blue21;\red46\green117\blue182;\red0\green128\blue0;\red0\green100\blue0;\red128\green0\blue0;\red128\green0\blue128;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl240\slmult1\qc\b\f0\fs22\lang9 CREAR PROY ASP CON MVC. INTRO\par
\par

\pard\sa200\sl240\slmult1\b0 Notas: En el proyecto se ven files extension .cshtml, esto es C# con HTML.\par
\par

\pard\sa200\sl240\slmult1\qc\b 1. Create Proyect. ASP app NET CORE CON MVC.\par
==============================================\par

\pard\sa200\sl240\slmult1\par
* Este proyecto usa net 6 y visual studio 2022.\b0\par
1. Crear Proyecto vis st 2022, asp net 6 MVC., no check https, no authentication.\par
\par
2. \tab\cf1 Nota\cf0 . No se ve el file  startup en el explorador de proyectos. Todo se configura en Program.cs. La inyeccion de dependencia tambien.\par
\tab\cf1 Nota\cf0 . para poner el Explorador de Proyecto a la derecha, hacer foco,  ir a Windows / Dock\par
INSTALAR EntityFramework, el ORM default de NetCore, o sea para mapear una base de datos p trabajar con POO.p hacer una insercion se crea un objeto, se cargan los atributos, se llama al metodo add. y el entity graba en la DDBB.\par
\par

\pard\sa200\sl240\slmult1\qc\b 2. * INSTALACION DE PAQUETES NUGETs:\par
====================================\par

\pard\sa200\sl240\slmult1\par
* CONSOLA DE NUGETS\par
\b0 1. Ir al proyecto en el \cf2 Solution Explorer y ubicar el proyecto \cf0 IntroASP,\par
right click, \cf2 seleccionar NuGet Package Manager.\cf0\par
\par
.MS EntityFrameworkCore.SQLServer.\par
. entity  tools\par
. Confirmar instalacion en Dependencias, Paquetes.\par
\par
\par

\pard\sa200\sl240\slmult1\qc\b 3. Scaffold-DbContext.\par
===================================\par

\pard\sa200\sl240\slmult1\b0\par
Preparar para EntityFramework el DbContext, y poner el modelo de datos dentro de Models:\par
\par
Ir a -> \cf2\b Tools, Nuget Package Manager, Package Manager Console\cf0 .\b0\par
PM> \cf1 Scaffold-DbContext "Server=wwwserver0; Database=HLeon; Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer \par
-OutputDir Models\par
\cf0 =======================================================================\par
\cf1\b\fs28 OJO\cf0\b0\fs22  ====> *****   si hay errores en el programa dara "failed"  <<== OJO\par
======================================================================\par
Aclaracion:\par
\cf2\b Scaffold-DbContext\cf0\b0 : lee la database y la tabla y la copia a la estructura en el proyecto. Crea clases semejantes a las tablas.\par
\cf2 Server\cf0 : es el nombre del computador server.\par
\cf2 Database\cf0 : el nombre de la database para mapear con el ORM EntityFramework\par
\cf2 Trusted\cf0  : para la autenticacion.\par
\cf2 EntityframeworkCore.SqlServer: \cf0 es el nombre del framework instalado Nuget q se encarga de la conexion a la DDBB.\par
\cf2 -OutputDir\cf0 : el nombre de la carpeta Models o Modelos.\par
\par
\{\par
\cf3\f1\fs19 To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see {\cf0{\field{\*\fldinst{HYPERLINK https://go.microsoft.com/fwlink/?linkid=2131148 }}{\fldrslt{https://go.microsoft.com/fwlink/?linkid=2131148\ul0\cf0}}}}\f1\fs19 . For more guidance on storing connection strings, see {\cf0{\field{\*\fldinst{HYPERLINK http://go.microsoft.com/fwlink/?LinkId=723263 }}{\fldrslt{http://go.microsoft.com/fwlink/?LinkId=723263\ul0\cf0}}}}\f1\fs19 .\par
PM> \cf0\f0\fs22\par
\}\par
Nota: \par
* El Visual St crea dentro de Models ->  la carpeta HLeonContext\par
para la clase DbContext.\par
* Crea una clase para cada tabla: Beer y Brand.\par
\par
* Dentro de Model/HleonContext.cs  :\par
formato seria  (DababaseName)Context.  Es una clase creada por .NET\par
\par
//--------------------------------------------------------------\par
\cf4\f1\fs19 namespace\cf3  IntroASP.Models\par
\{\par
    \cf4 public\cf3  \cf4 partial\cf3  \cf4 class\cf3  \cf5 HLeonContext\cf3  : DbContext\par
    \{\par
        \cf4 public\cf3  \cf5 HLeonContext\cf3 ()\par
        \{\par
        \}\par
\par
        \cf4 public\cf3  \cf5 HLeonContext\cf3 (DbContextOptions<HLeonContext> options)\par
            : \cf4 base\cf3 (options)\par
        \{\par
        \}\par
\par
        \cf4 public\cf3  \cf4 virtual\cf3  DbSet<Beer> Beers \{ \cf4 get\cf3 ; \cf4 set\cf3 ; \} = \cf4 null\cf3 !;\par
        \cf4 public\cf3  \cf4 virtual\cf3  DbSet<Brand> Brands \{ \cf4 get\cf3 ; \cf4 set\cf3 ; \} = \cf4 null\cf3 !;\par
\par
        \cf4 protected\cf3  \cf4 override\cf3  \cf4 void\cf3  OnConfiguring(DbContextOptionsBuilder optionsBuilder)\par
        \{\par
            \cf4 if\cf3  (!optionsBuilder.IsConfigured)\par
            \{\par
\cf6 #warning\cf3  To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see {{\field{\*\fldinst{HYPERLINK https://go.microsoft.com/fwlink/?linkid=2131148 }}{\fldrslt{https://go.microsoft.com/fwlink/?linkid=2131148\ul0\cf0}}}}\f1\fs19 . For more guidance on storing connection strings, see {{\field{\*\fldinst{HYPERLINK http://go.microsoft.com/fwlink/?LinkId=723263 }}{\fldrslt{http://go.microsoft.com/fwlink/?LinkId=723263\ul0\cf0}}}}\f1\fs19 .\par
                optionsBuilder.UseSqlServer(\cf7 "Server=wwwserver0; Database=HLeon; Trusted_Connection=True;"\cf3 );\par
            \}\par
        \}\par
\par
        \cf4 protected\cf3  \cf4 override\cf3  \cf4 void\cf3  OnModelCreating(ModelBuilder modelBuilder)\par
        \{\par
            modelBuilder.Entity<Beer>(entity =>\par
            \{\par
                entity.ToTable(\cf7 "Beer"\cf3 );\par
\par
                entity.Property(e => e.BeerId).ValueGeneratedNever();\par
\par
                entity.Property(e => e.Name)\par
                    .HasMaxLength(10)\par
                    .IsFixedLength();\par
\par
                entity.HasOne(d => d.Brand)\par
                    .WithMany(p => p.Beers)\par
                    .HasForeignKey(d => d.BrandId)\par
                    .HasConstraintName(\cf7 "FK_Beer_Beer"\cf3 );\par
            \});\par
\par
            modelBuilder.Entity<Brand>(entity =>\par
            \{\par
                entity.ToTable(\cf7 "Brand"\cf3 );\par
\par
                entity.Property(e => e.BrandId).ValueGeneratedNever();\par
\par
                entity.Property(e => e.Name)\par
                    .HasMaxLength(10)\par
                    .IsFixedLength();\par
\par
                entity.Property(e => e.Neto).HasColumnName(\cf7 "neto"\cf3 );\par
            \});\par
\par
            OnModelCreatingPartial(modelBuilder);\par
        \}\par
\par
        \cf4 partial\cf3  \cf4 void\cf3  OnModelCreatingPartial(ModelBuilder modelBuilder);\par
    \}\par
\}\par
\cf0\f0\fs22 --------------------------------------------------------------\par
\par
\par
\b UPDATE DE LAS CLASES AL MODIFICAR DATABASE.\b0\par
el mismo comando mas  ->    -force\par
Procedimiento : \par
1. Compilar el proyecto para q se ejecute\par
2.  ......Model \cf1\b\fs36 -force    \cf0\b0\fs22 <<--  Add command.\par
\par
\par
\b * GUARDAR LA CONEXION EN LUGAR SECRETO.\b0\par
Se puede guardar en un lugar secreto, una carpeta pero hay otra manera.\par
en la carpeta \cf1\b appsettings.json\cf0\b0  en el file incluir la \ul\b cadena de conexion\ulnone\b0 :\par
\cf3\f2\fs19\lang1033\par
<begin>\f1\lang9\par
\},\par
  \cf8 "AllowedHosts"\cf3 : \cf7 "*"\cf3 ,\par
  \cf8 "ConnectionStrings"\cf3 : \{\par
    \cf8 "\cf1\b\f2\lang1033 conn_str\cf8\b0\f1\lang9 "\cf3 : \cf7 "Server=wwwserver0; Database=HLeon; Trusted_Connection=True;"\cf3\par
  \}\par
\cf0\f0\fs22 <end>\par
\par
\par
\b 4. INYECCION DE DEPENDENCIAS.\par
=============================\par
\b0\par
* La inyeccion se realiza en un contenedor. \par
Inyectar el EntityFrameWork a traves de DbContext, creado automaticamente como HLeonContext.cs dentro de Models:\par
\par
1. Ir a Program.cs. Ubicar la linea :\par
\cf9\par
// Add services to the container.\cf3\par
\lang1033 => \lang9 builder.Services.AddControllersWithViews();\par
\cf0\par
2.abajo poner \par
\cf9 // INYECCION DE DbContext \par
\par
// Se necesitara incluir lo sigte:\par
\cf4\f1\fs19 using\cf3  IntroASP.Models;\par
\cf4 using\cf3  Microsoft.EntityFrameworkCore;\par
\f0\fs22 * usar la conection string de appsettings.json --> conn_str\par
* usar el nombre asignado x .net a la clase dbcontext --> HLeonContext.\par
\par
// --------- INYECCION ----------------------------------------------\par
\fs18 builder.Services.AddDbContext<\cf1 HLeonContext\cf3 >(options => \{\par
    options.UseSqlServer( builder.Configuration.GetConnectionString(\cf1 "conn_str") \cf3 );\par
\});\cf0\par
\fs22 // ------------------------------------------------------------------\par
\par
. builder: add un servicio\par
.  AddDbContext: es un servicio tipo DbContext.\par
. <HLeoncontext>: es el servicio a crear inyectado.\par
\cf3 .\lang1033  \lang9 UseSqlServer\lang1033 (): metodo del framework MSEntityFrameworkCore()\par
\lang9 . builder.Configuration.GetConnectionString(\cf7 "conn_str"\cf3 ))\lang1033  :  Para get the string.\par
\par
\par

\pard\sa200\sl240\slmult1\qc\b 5.  CREAR CONTROLADOR.\par
===========================================\par

\pard\sa200\sl240\slmult1\par
\b0 . Carpeta Controllers, \cf2 Add, Controller\cf3 , \par
In new window seleccionar :\par
\cf2 Tipo MVC,   MVC controller empty\cf3 .\par
En new window Nombre: \cf2 Brand_Controller.cs\cf3\par
file:\par
//----------------------------------------------------\par
\cf4\fs18 using\cf3  Microsoft.AspNetCore.Mvc;\par
\cf4 namespace\cf3  IntroASP_MVC.Controllers\par
\{\par
    \cf4 public\cf3  \cf4 class\cf3  \cf5 Brand_Controllercs\cf3  : Controller\par
    \{\par
        \cf4 public\cf3  IActionResult Index()       <----  Agregar Vista Right cl, Add, View\par
        \{\par
            \cf4 return\cf3  View();             <<<===========   una vista es un Razor File\par
        \}// IActionResult\par
    \}// class\par
\}\par
\fs22 //----------------------------------------------------\par
\par
\cf0\b * AGREGAR UNA VISTA:\par
\cf3\b0 .en \fs18    \cf4 public\cf3  IActionResult \cf1\b Index()       \cf3\b0 de \cf2\fs22 Brand_Controller.cs\cf3\par
sobre "Index()", right click, \cf2 Add, View empty\cf3 .\par
\par
\cf1\b * OJO ->\cf3\b0  Se crea -> carpeta \cf2 Views/Brand_/Index.cshtml \cf0 donde Brand_ es el indicador del controlador de esa view.\cf3\par
\par
.entrar al file y escribir \cf2 "Hola"\par
\cf3\par
.probar con poner\cf2 "http://localhost:5134\cf1 /Brand_\cf2 "\cf3  \par
"Brand_" es parte del controlador \cf1 Brand_\cf3 Controller.cs. \par
El controladodr tiene una view() Index.cshtml.\par
y aparece el saludo "Hola" desde la view. \par
\par
. Las carpetas tienen la estruct. View/Brand/Index.cshtml, \cf2\b por q es una vista manejada por el controlador Brand_\cf3\b0\par
\par
\par
\par
\cf0\b * EL HEADER Y FOOTER de la vista:\cf3\b0\par
\b La carpeta Shared :\b0\par
\par
* el header y footer del index.cshtml esta en \cf2\b Shared, Layout \cf3\b0 :\par
* En el file \cf2\b Shared/_Layout\cf3\b0  esta el area \cf1\b\fs24 @Renderbody() \cf3\b0\fs22 es donde se pone el contenido de las vistas.\par
\par
\par
\b * ANULAR EL LAYOUT :\par
\b0 En la vista  Index.cshtml \b\par
\b0 @\{\par
    \cf1 Layout=null;\cf3\par
\}\par
@*\cf10  comentarios Layout=null p q esa vista Index.cshtml no muestre el layout x default q incluye header y footer \cf3 *@ \par
\par
\cf0\b\par
* O bien CAMBIAR EL LAYOUT\b0 : \par
\cf1 Layout ="milayout" ;\cf10\par
\cf1\par
Nota\cf3 : desaparecen headers y footer solo con y en \par
localhost:nnn/\cf5 Brand_Controllercs , \cf0 esto lleva al file ->Vi\cf3 ews/Index.cshtml:\par
"Hola, soy la vista Index.cshtml"\par
\par
\par
\b * VISTAS DEFAULT \b0\par
El file \cf1\b _ViewStart.cshtml \cf3\b0 contiene una llamada a la vista default:\par
//----------------------------------------------------\par
@*\cf9\par
\cf10  Todas las vistas incluyen este file _Layout.cshtml\cf9\par
\cf10  \cf3 *@\par
@\{\par
    Layout = \cf7 "_Layout"\cf3 ;\par
\}\par
//----------------------------------------------------\par
\par
\par

\pard\sa200\sl240\slmult1\qc\b 6. AGREGAR UNA OPCION EN NAV-BAR con su controlador.\par
====================================================\b0\par

\pard\sa200\sl240\slmult1\par
En el file _Layout.cshtml agregar opcion "Marcas"\par
\b * CREAR EN EL CONTROLADOR \cf2 Brand_Controller.cs\cf3  :\par
\cf0\b0\f2\fs19\par
.crear \cf1 _context\cf0  y cargarlo con el parametro tipo Contexto de Database. usar \cf4\f1 using\cf3  IntroASP.Models;\cf4\par
\cf3\f0\fs22\par
// --------------------------------------------------------------------\cf4\f1\fs19\par
namespace\cf3  IntroASP.Controllers\par
\{\par
    \cf4 public\cf3  \cf4 class\cf3  \cf5 Brand_Controller\cf3  : Controller\par
    \{\par
        \cf9 // ------------------------------------------------\cf3\par
        \cf9 // Crear var _context y en el constructor cargarla con\cf3\par
        \cf9 // el parametro context.\cf3\par
        \cf9 // Si HLeonContext no fue inyectado en Program.cs NO se lo podra\cf3\par
        \cf9 // usar en el Controller.\cf3\par
\par
        \cf4 public\cf3  \cf4 readonly\cf3  HLeonContext \cf1 _context\cf3 ;\par
\par
        \cf4 public\cf3  \cf5 Brand_Controller\cf3 (HLeonContext context)\par
        \{\par
            \cf1\b _context \cf3\b0 = context;\par
        \}\par
        \cf9 // -------------------------------------------------\cf3\par
\par
\par
        \cf9 // AGREGAR using EntityFrameworkCore PARA .ToListAsync\cf3\par
        \cf4 public\cf3  \cf4 async\cf3  Task<IActionResult> Index()\par
        \{\par
            \cf4 return\cf3  View( \par
                \cf4 await\cf3  \cf1 _context\cf3 .Brands.ToListAsync()\par
            );\par
\par
\f2\tab       \cf9\f1 /* o bien:\par
             => View( await \cf1 _context\cf9 .Brands.ToListAsync() );\par
            */\cf3\par
        \}\par
\par
    \}\cf9 // class\cf3\par
\}\par
\f0\fs22 // --------------------------------------------------------------------\par
\par
\par
\par
\par
Min 29.15\par

\pard\sa200\sl240\slmult1\qc\b CREAR OTRO CONTROLADOR PARA Beer\par
================================\par

\pard\sa200\sl240\slmult1\b0 . crear controlador vacio. BeerController.\par
\par
// -------------------------------------------------------------------\cf4\f1\fs19\par
using\cf3  IntroASP.Models;\par
\cf4 using\cf3  Microsoft.AspNetCore.Mvc;\par
\cf4 using\cf3  Microsoft.EntityFrameworkCore;\cf4\par
namespace\cf3  IntroASP.Controllers\par
\{\par
    \cf4 public\cf3  \cf4 class\cf3  \cf5 BeerController\cf3  : Controller\par
    \{\par
        \cf4 private\cf3  \cf4 readonly\cf3  HLeonContext _context;\par
\f2\tab  // Constructor:\f1\par
        \cf4 public\cf3  \cf5 BeerController\cf3 (\f2  \f1 HLeonContext context)\par
        \{\par
            _context = context;\par
        \}\par
\par
        \cf9 // IActionResult es p identificar una interfaz como puede ser json,\par
\f2\tab  \f1  vista, etc\cf3\par
        \cf4 public\cf3  \cf4 async\cf3  Task<IActionResult> Index()\f2   <------- OJO   CREAR VIEW()\f1\par
        \{\par
            \cf9 // Incluir en var \cf1 beers los Brand relacionados \cf9 con Beer segun key \par
\f2\tab\tab\f1 constrain.\cf3\par
            \cf4 var\cf3  beers = _context.Beers.Include(b => b.Brand);\par
            \par
            \cf4 return\cf3  View( \cf4 await\cf3  beers.ToListAsync() );\par
        \}\par
\par
\par
    \}\cf9 // class\cf3\par
\}\par
\f0\fs22 // -------------------------------------------------------------------\par
\par
\par
\ul\b la View:\ulnone\b0\par
// -------------------------------------------------------------------\par
\f1\fs19 @model List<Beer>\par
\par
\cf4 <\cf11 h1\cf4 >\cf3 Cervezas\cf4 </\cf11 h1\cf4 >\cf3\par
\cf4 <\cf11 table\cf3  \cf1 class\cf4 ="table">\cf3\par
    \cf4 <\cf11 thead\cf4 >\cf3\par
        \cf4 <\cf11 tr\cf4 >\cf3\par
            \cf4 <\cf11 th\cf4 >\cf3 Nombre\cf4 </\cf11 th\cf4 >\cf3\par
            \cf4 <\cf11 th\cf4 >\cf3 Marca\cf4 </\cf11 th\cf4 >\cf3\par
            \cf4 <\cf11 th\cf4 >\cf3 otras\cf4 </\cf11 th\cf4 >\cf3\par
        \cf4 </\cf11 tr\cf4 >\cf3\par
    \cf4 </\cf11 thead\cf4 >\cf3\par
\par
    \cf4 <\cf11 tbody\cf4 >\cf3\par
        @\cf4 foreach\cf3 ( \cf4 var\cf3  beer \cf4 in\cf3  Model)\par
        \{\par
            \cf4 <\cf11 tr\cf4 >\cf3\par
                \cf4 <\cf11 td\cf4 >\cf3  \par
                    @Html.DisplayFor( m => beer.Name)\par
                \cf4 </\cf11 td\cf4 >\cf3\par
                \cf4 <\cf11 td\cf4 >\par
\cf3                     @Html.DisplayFor( m=>\cf1 beer.Brand.Name\cf3 )\par
                \cf4 </\cf11 td\cf4 >\cf3\par
            \cf4 </\cf11 tr\cf4 >\cf3\par
        \}\par
    \cf4 </\cf11 tbody\cf4 >\cf3\par
\par
\cf4 </\cf11 table\cf4 >\cf3\par
\f0\fs22 // -------------------------------------------------------------------\par
\par
\cf0\lang9 * 34:45  Hasta aca Lista Cervezas y Marcas relacionadas funciona bien.\par
// ===================================================================\par
\par
\par
\par
\par
// ===================================================================\par
\b\par

\pard\sa200\sl240\slmult1\qc * 34:46 Sgte paso.Opcion para CREAR registro de Nueva cerveza.\par
===============================================================\par

\pard\sa200\sl240\slmult1\b0\par
\par
\cf1\b PASO 1\cf0\b0\par
* EN EL \cf2\b\fs24 Beer.Index.cdhtml\cf0\b0\fs22 , la vista de Beer, poner una opcion a CREAR:\par
\par
\cf3\f2\fs19\lang1033 //----------------------------\f1\lang9\par
@model List<Beer>\par
\cf4 <\cf11 h1\cf4 >\cf3 Cervezas\cf4 </\cf11 h1\cf4 >\cf3\par
\par
\cf4 <\cf11 p\cf4 >\cf3  \par
    \cf4 <\cf12\b a\cf3\b0  \cf12\b asp-action\cf4\b0 ="Create"\cf3  \cf4 >\cf1 Crear\f2\lang1033  Cerveza \cf4\f1\lang9 </\cf12\b a\cf4\b0 >\f2\lang1033       @*  <-- Opcion Crear *@\cf3\f1\lang9\par
\cf4 </\cf11 p\cf4 >\par
\cf3\f2\lang1033 //----------------------------\par
\f0\fs22\par
\par
\cf1\b PASO 2\cf3\b0\par
* Controller \cf2\b\fs24 BeerController.cs\b0  \cf3\fs22 :\par
modificar : crear un diccionario ViewData[] con Brands, id y Name.\par
\f2\fs19 /*\f1\par
            ViewData[\cf7 "Brands"\cf3 ] = \cf4 new\cf3  SelectList(_context.Brands, \cf7 "BrandId"\cf3 ,\par
 \f2\tab\tab\cf7\f1 "Name"\cf3 );\par
\par
            \cf4 return\cf3  View();\par
\f0\fs22 */\par
\par
// -----------------------------------------------\par
codigo\par
\cf4\f1\fs19 namespace\cf3  IntroASP.Controllers\par
    \cf4 public\cf3  \cf4 class\cf3  \cf5 BeerController\cf3  : Controller\par
        \cf4 private\cf3  \cf4 readonly\cf3  HLeonContext _context;\par
\par
        \cf4 public\cf3  \cf5 BeerController\cf3 (HLeonContext context)\par
        \{\par
            _context = context;\par
        \}\par
        \cf4 public\cf3  \cf4 async\cf3  Task<IActionResult> Index()\f0\fs22\par
...\par
\f2\fs19 ...\par
\f1         \cf4 public\cf3  IActionResult Create()\par
        \{\par
            \cf9 // El acceso a la dababase no necesita ser async. se lee Beer y\par
\f2\tab\tab\f1  Brand\cf3\par
            \cf9 // Al correr el controlador se crea un diccionario q no llega \par
\f2\tab\tab\f1 como modelo sino como\cf3\par
            \cf9 // un diccion para acceder desde la view.\cf3\par
            \cf9 //  \cf3\par
            \par
            \cf9 // SelectList usa using Microsoft.AspNetCore.Mvc.Rendering;\cf3\par
            ViewData[\cf7 "Brands"\cf3 ] = \cf4 new\cf3  SelectList(_context.Brands, \cf7 "BrandId"\cf3 ,\par
 \f2\tab\tab\cf7\f1 "Name"\cf3 );\par
\par
            \cf4 return\cf3  View();\par
\par
            \cf9 // ViewData[] es el diccionario\cf3\par
            \cf9 // se lo carga con SelectList, un obj de Microsoft Rendering.\par
\f2\tab\tab\f1  poner using.\cf3\par
            \cf9 // El origen de datos seria _context.Brands\cf3\par
            \cf9 // los campos del diccionario son los BrandId y Name, un \par
\f2\tab\tab\f1 diccionario\cf3\par
            \cf9 // siempre tiene un key y un Valor. el key no se vera sino q se \par
\f2\tab\tab\f1 mostrara\cf3\par
            \cf9 // el Name en la vista.\cf3\par
        \}\par
\f2 // -----------------------------------------------\cf0\f0\fs22\lang9\par
\par
\par
\cf1\b PASO 3\cf0\b0\par

\pard\sa200\sl240\slmult1\qc * AL CONTROLADOR BeerController CREARLE LA \cf1\b VISTA Beer/Create\cf0\b0  \par
============================================================\par

\pard\sa200\sl240\slmult1\par
.right click en "Create" de : \f1\fs19\lang1033 public\cf3  IActionResult \cf2\b Create()\cf0\b0\f0\fs22\lang9\par
y abrir la vista Beer.Create.cshtml.\par
\par
* ponerle BootStrap ultima version. si todavia no tiene vis studio instalar el package NuGet.\par
\par
Agregar \cf1 ruta\cf0  en el controller -> BeerController :\par
// ---------------------------------------------------------\par
\cf3\f1\fs19  \cf4 public\cf3  IActionResult Create()       \cf9 //  <<---- Crear la vista de Create. OJO\cf3\par
\f2\lang1033 ...\par
...\par
\cf0\f0\fs22\lang9\tab\par
\cf3\f1\fs19         [HttpPost]\f2\lang1033\tab\tab\tab\tab\tab\tab //  <-------  \cf1 Ruta POST\cf3\f1\lang9\par
        \cf4 public\cf3  IActionResult Create(\cf4 int\cf3  a)\par
        \{\par
            ViewData[\cf7 "Brands"\cf3 ] = \cf4 new\cf3  SelectList(_context.Brands, \cf7 "BrandId"\cf3 , \par
\f2\lang1033\tab\tab\cf7\f1\lang9 "Name"\cf3 );\par
\par
            \cf4 return\cf3  View();\par
\par
        \}\cf0\f0\fs22\par
// ---------------------------------------------------------\par
\par
\par
\par
\par
\cf1\b PASO 4\par
\cf0\b0\par

\pard\sa200\sl240\slmult1\qc Agregar \cf1\b\fs28 ViewModel\cf0\b0\fs22  para la vista con Form Create.cdhtml:\par
=======================================================\par

\pard\sa200\sl240\slmult1\par
* Concepto: ViewModels y DataAnotations. presenta datos desde diferentes origenes. \par
(Modelo directo de EntityFramework tambien se podria pero ahora no.)\par
En este ViewModel se colocan las \cf1\b validaciones\cf0\b0 .\par
\par
\par
. Crear \cf2 carpeta ViewModel dentro de Models.\par
\cf0 . Crear la clase dentro de la carpeta \cf1 ViewModel.cshtml\cf0\par
. colocar los \cf1 campos\cf0  ke se necesitan. \par
. En este modelo se asignan las \cf1 DataAnotations\cf0  a cada campo.\par
\par
\par
ViewModel.cshtml:\par
// ---------------------------------------------------------\par
\cf4\f1\fs19 using\cf3  System.ComponentModel.\cf1\b DataAnnotations\cf3\b0 ;\par
\par
\cf4 namespace\cf3  IntroASP.\cf1 Models.ViewModels\cf3\par
\{\par
    \cf4 public\cf3  \cf4 class\cf3  \cf5 BeerViewModel\cf3\par
    \{\par
        \cf9 //\cf3\par
        [Required]\par
        [Display(Name = \cf7 "Nombre"\cf3 )]     \f2\lang1033 // \cf9 S\f1\lang9 ystem.Comp.\f2\lang1033   \f1\lang9 ..DataAnnotations\cf3\par
        \cf4 public\cf3  \cf4 string\cf3  Name \{ \cf4 get\cf3 ; \cf4 set\cf3 ; \}\par
\par
        \cf9 //\cf3\par
        [Required]\par
        [Display(Name = \cf7 "Marca"\cf3 )]\par
        \cf4 public\cf3  \cf4 int\cf3  BrandId \{ \cf4 get\cf3 ; \cf4 set\cf3 ; \}    \par
\par
    \}\par
\}\cf0\f0\fs22\par
// ---------------------------------------------------------\par
\par
Min 43:40\par
\cf1\b PASO 5\cf0\b0\par
\b * En el view Beer/Create form \cf1 relacionar con un modelo \cf0 de validaciones.\par
=======================================================================\par
\b0\par
.En el Views/\cf2\b Beer/Create.cdhtml \cf0\b0 poner usings.\par
. En este view se relaciona con el modelo donde estan las validaciones.\par
con @model <modelo>, \par
luego @using es para q se reconosca el modelo.\par
\par
Views/\cf2\b Beer/Create.cdhtml :\cf0\b0\par
// ---------------------------------------------------------\par
\cf3\f1\fs19 @\cf4 using\cf3  IntroASP.Models.ViewModels;\par
@\cf1 model\cf3  BeerViewModel\par
\par
\cf4 <\cf11 h1\cf4 >\cf3 Crear Cerveza\cf4 </\cf11 h1\cf4 >\cf3\par
\cf0\f0\fs22 ..\par
..\par
// ---------------------------------------------------------\par
\par
\par
\par
\par
* Colocar los tabs ASP para las validaciones de dos campos \par
.mas el boton submit.\par
Views/\cf2\b Beer/Create.cdhtml\cf0\b0 :\par
//--------------------------------------------------------------------\par
\cf4\f1\fs19 <\cf12\b form\cf3\b0  \cf12\b asp-action\cf4\b0 ="Create">\cf3\par
\par
        \cf10 <!-- Trabajar con ViewModel PARA validaciones  -->\cf3\par
\par
        \cf4 <\cf12\b div\cf3\b0  \cf12\b asp-validation-summary\cf4\b0 ="\cf3 ModelOnly\cf4 "\cf3  \cf1 class\cf4 ="text-danger">\cf3   \cf4 </\cf12\b div\cf4\b0 >\cf3\par
\f2\lang1033\tab\tab\f1\lang9\par
        \cf4 <\cf11 div\cf3  \cf1 class\cf4 ="form-group">\cf3  \par
            \cf4 <\cf12\b label\cf3\b0  \cf12\b asp-for\cf4\b0 ="\cf3 Name\cf4 "\cf3  \cf1 class\cf4 ="control-label"\cf3  \cf4 >\cf3  \cf4 </\cf12\b label\cf4\b0 >\cf3\par
            \cf4 <\cf12\b input\cf3\b0  \cf12\b asp-for\cf4\b0 ="\cf3 Name\cf4 "\cf3  \cf1 class\cf4 ="form-control"\cf3  \cf4 />\cf3\par
            \cf4 <\cf12\b span\cf3\b0  \cf12\b asp-validation-for\cf4\b0 ="\cf3 Name\cf4 "\cf3  \cf1 class\cf4 ="text-danger"></\cf12\b span\cf4\b0 >\cf3\par
        \cf4 </\cf11 div\cf4 >\cf3\par
\par
        \cf4 <\cf11 div\cf3  \cf1 class\cf4 ="form-group">\cf3  \par
            \cf4 <\cf12\b label\cf3\b0  \cf12\b asp-for\cf4\b0 ="\cf3 BrandId\cf4 "\cf3  \cf1 class\cf4 ="control-label"\cf3  \cf4 >\cf3  \cf4 </\cf12\b label\cf4\b0 >\cf3\par
            \cf4 <\cf12\b select\cf3\b0  \cf12\b asp-for\cf4\b0 ="\cf3 BrandId\cf4 "\cf3  \cf1 class\cf4 ="form-control"\cf3  \par
\f2\lang1033\tab\tab\tab\tab\cf12\b\f1\lang9 asp-items\cf4\b0 ="\cf1\fs20 ViewBag.Brands\cf4\fs19 ">\cf3  \cf4 </\cf12\b select\cf4\b0 >\f2\lang1033            <--- OJO\cf3\f1\lang9\par
            \cf4 <\cf12\b span\cf3\b0  \cf12\b asp-validation-for\cf4\b0 ="\cf3 BrandId\cf4 "\cf3  \cf1 class\cf4 ="text-danger"></\cf12\b span\cf4\b0 >\cf3\par
        \cf4 </\cf11 div\cf4 >\cf3\par
\par
        \cf4 <\cf11 div\cf3  \cf1 class\cf4 ="form-group"\cf3  \cf4 >\cf3\par
            \cf4 <\cf11 input\cf3  \cf1 type\cf4 ="submit"\cf3  \cf1 value\cf4 ="Crear"\cf3  \cf1 class\cf4 ="btn btn-primary"\cf3  \cf4 />\cf3\par
        \cf4 </\cf11 div\cf4 >\cf3\par
        \cf10 <!-- ---------------------------------------------------------------------  -->\cf3\par
\par
    \cf4 </\cf12\b form\cf4\b0 >\par
\cf0\f0\fs22 //--------------------------------------------------------------------\par
\par
\b\fs36 min 47.45\b0\fs22  esta listo p correrlo.\par
pero ...\par
\par
Agregar al final del form :\par
\{----------------------------------------------------------------------\par
</div>\par
\cf3\f1\fs19\par
@section Scripts\{\par
    @\{\par
        \cf4 await\cf3  Html.RenderPartialAsync(\cf7 "_ValidationScriptsPartial"\cf3 );\par
    \}\par
\}\par
\cf0\f0\fs22 ---------------------------------------------------------------------\}\par
\par
\par
\par
\par
\b\fs28 Min 51.00  \fs22  GUARDAR,   SAVE RECORD.\b0\par
\par

\pard\sa200\sl240\slmult1\qc\b * SAVE RECORD\par
=============\par

\pard\sa200\sl240\slmult1\qj\par
BeerController.cs\par
\par

\pard\sa200\sl240\slmult1\b0 // -----------------------------------------------------------------------\par
...\par
...\par
\cf3\f2\fs19\lang1033  \f1\lang9 [HttpPost]\par
\f2\lang1033  \f1\lang9 [ValidateAntiForgeryToken]\par
        \cf4 public\cf3  \cf4 async\cf3  Task< IActionResult>  \cf1\b Create(BeerViewModel model)\par
\cf3\b0         \{\par
            \cf4 if\cf3  (ModelState.IsValid)\par
            \{\par
                \cf4 var\cf3  beer = \cf4 new\cf3  Beer()\par
                \{\par
                    Name = model.Name,\par
                    BrandId = model.BrandId\par
                \};\par
                \par
                \cf9 // Cargar buffer de EntityFramework.\cf3\par
                _context.Beers.Add(beer); \par
\par
                \cf9 // Save in the Database :\cf3\par
                \cf4 await\cf3  _context.SaveChangesAsync();  \par
\f2\lang1033\tab\tab    // Redireccionar\f1\lang9\par
                \cf4 return\cf3  RedirectToAction(\cf7 "Index"\cf3 );   \par
\par
\par
            \}\cf9 //if\cf3\par
\par
            ViewData[\cf7 "Brands"\cf3 ] = \cf4 new\cf3  SelectList(_context.Brands, \cf7 "BrandId"\cf3 , \cf7 "Name"\cf3 ,\par
 \f2\lang1033\tab\tab\f1\lang9 model.BrandId);\par
\par
            \cf4 return\cf3  View(model);\par
        \}\par
\par
    \}\cf9 // class\cf3\par
\}\par
\cf0\f0\fs22 // -----------------------------------------------------------------------\par
Min 59.02 probada la Create().\par
\par
\par
\par
\par
* AGREGAR\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
end.\par
}
 